---
# Source: bow/templates/00-namespace.yaml

apiVersion: v1
kind: Namespace
metadata:
  name: "bow"
---
# Source: bow/templates/service.yaml

apiVersion: v1
kind: Service
metadata:
  name: bow
  namespace: bow
  labels:
    app: bow
    chart: bow-0.7.0
    release: bow
    heritage: Tiller
spec:
  type: LoadBalancer
  ports:
    - port: 9300
      targetPort: 9300
      protocol: TCP
      name: bow
  selector:
    app: bow
  sessionAffinity: None

---
# Source: bow/templates/deployment.yaml
apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: bow
  namespace: bow
  labels:
    app: bow
    chart: bow-0.7.0
    release: bow
    heritage: Tiller
spec:
  replicas: 1
  selector:
    matchLabels:
      app: bow
      release: bow
  template:
    metadata:
      labels:
        app: bow
        release: bow
    spec:
      volumes:
        - name: secret-volume
          secret:
            secretName: ssh-key-secret
      containers:
        - name: bow
          # Note that we use appVersion to get images tag.
          image: "alwin2/bow"
          imagePullPolicy: Always
          command: ["/bin/bow"]
          volumeMounts:
            - name: secret-volume
              readOnly: true
              mountPath: "/root/.ssh/"
          env:
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            # Enable polling
            - name: POLL
              value: "1"
            # Enable GCR with pub/sub support
            - name: PROJECT_ID
              value: ""
            - name: PUBSUB
              value: "" # Set to '1' or 'true' to enable GCR pubsub
            # Enable AWS ECR
            - name: AWS_ACCESS_KEY_ID
              value: ""
            - name: AWS_SECRET_ACCESS_KEY
              value: ""
            - name: AWS_REGION
              value: ""
            # Enable webhook endpoint
            - name: WEBHOOK_ENDPOINT
              value: ""
            # Enable mattermost endpoint
            - name: MATTERMOST_ENDPOINT
              value: ""
            - name: SLACK_TOKEN
              value: ""
            - name: SLACK_CHANNELS
              value: ""
            - name: SLACK_APPROVALS_CHANNEL
              value: ""
            # Enable hipchat approvials and notification
            - name: HIPCHAT_TOKEN
              value: ""
            - name: HIPCHAT_CHANNELS
              value: ""
            - name: HIPCHAT_APPROVALS_CHANNEL
              value: ""
            - name: HIPCHAT_APPROVALS_BOT_NAME
              value: ""
            - name: HIPCHAT_APPROVALS_USER_NAME
              value: ""
            - name: HIPCHAT_APPROVALS_PASSWORT
              value: ""
            - name: NOTIFICATION_LEVEL
              value: "info"
            # Enable insecure registries
            - name: INSECURE_REGISTRY
              value: "true"
            # Git configuration
            - name: REPO_CHART_PATH
              value: helm/petclinic
            - name: REPO_URL
              value: git@iteragit.iteratec.de:bachelors-thesis-aeb/petclinic-deployment.git
            - name: DEBUG
              value: "1"
            - name: REPO_USERNAME
              value: ""
            - name: REPO_PASSWORD
              value: ""
          ports:
            - containerPort: 9300
          livenessProbe:
            httpGet:
              path: /healthz
              port: 9300
            initialDelaySeconds: 30
            timeoutSeconds: 10
          resources:
            limits:
              cpu: 500m
              memory: 512Mi
            requests:
              cpu: 250m
              memory: 256Mi